#!/usr/bin/env node
var K=Object.defineProperty;var g=(r,t)=>K(r,"name",{value:t,configurable:!0});import k,{Router as D}from"express";import Q from"cors";import Z from"better-sqlite3";import q from"path";import C from"fs";import V from"multer";import x from"jsonwebtoken";import _ from"dotenv";const J=q.resolve(),tt=q.resolve(J,"./database.sqlite"),c=new Z(tt),et=q.resolve(J,"./schema.sql"),st=C.readFileSync(et,"utf8");c.exec(st);const L=D();L.get("/",(r,t)=>{const n=c.prepare("SELECT * FROM Item").all().map(o=>({...o,isActive:!!o.isActive,variablePrice:!!o.variablePrice,printLocations:JSON.parse(o.printLocations||"[]")}));t.json(n)}),L.post("/",(r,t)=>{const{name:e,quantity:s,unit:n,isActive:o,category:a,supplier:i,printLocations:d,variablePrice:u,recipe:l,price:h}=r.body,N=c.prepare(`INSERT INTO Item (name, quantity, unit, isActive, category, supplier, printLocations, variablePrice, recipe, price)
     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`).run(e,s,n,o?1:0,a,i,JSON.stringify(d),u?1:0,l,h);t.json({id:N.lastInsertRowid}),console.log(`Item ADDED by USER at ${new Date().toLocaleString("es-MX")}`)}),L.put("/:id",(r,t)=>{const{id:e}=r.params,{name:s,quantity:n,unit:o,isActive:a,category:i,supplier:d,printLocations:u,variablePrice:l,recipe:h,price:m}=r.body;c.prepare(`UPDATE Item
     SET name = ?, quantity = ?, unit = ?, isActive = ?, category = ?, supplier = ?, printLocations = ?, variablePrice = ?, recipe = ?, price = ?
     WHERE id = ?`).run(s,n,o,a?1:0,i,d,JSON.stringify(u),l?1:0,h,m,e).changes>0?(t.json({message:"Item updated successfully"}),console.log(`Item UPDATED by USER at ${new Date().toLocaleString("es-MX")}`)):t.status(404).json({error:"Item not found"})}),L.delete("/:id",(r,t)=>{const{id:e}=r.params;c.prepare("DELETE FROM Item WHERE id = ?").run(e).changes>0?(t.json({message:"Item deleted successfully"}),console.log(`Item DELETED by USER at ${new Date().toLocaleString("es-MX")}`)):t.status(404).json({error:"Item not found"})});const F=D();F.get("/",(r,t)=>{const n=c.prepare("SELECT * FROM Agent").all().map(o=>({...o,isActive:!!o.isActive}));t.json(n)}),F.get("/names",(r,t)=>{const s=c.prepare("SELECT id, name, lastName FROM Agent").all();t.json(s)}),F.post("/",(r,t)=>{const{name:e,lastName:s,image:n,address:o,phone:a,rfc:i,email:d,pin:u,role:l,isActive:h}=r.body,N=c.prepare(`INSERT INTO Agent (name, lastName, image, address, phone, rfc, email, pin, role, isActive)
     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`).run(e,s,n,o,a,i,d,u,l,h?1:0);t.json({id:N.lastInsertRowid}),console.log(`Agent ADDED by USER at ${new Date().toLocaleString("es-MX")}`)}),F.put("/:id",(r,t)=>{const{id:e}=r.params,{name:s,lastName:n,image:o,address:a,phone:i,rfc:d,email:u,pin:l,role:h,isActive:m}=r.body;c.prepare(`UPDATE Agent
     SET name = ?, lastName = ?, image = ?, address = ?, phone = ?, rfc = ?, email = ?, pin = ?, role = ?, isActive = ?
     WHERE id = ?`).run(s,n,o,a,i,d,u,l,h,m?1:0,e).changes>0?(t.json({message:"Agent updated successfully"}),console.log(`Agent UPDATED by USER at ${new Date().toLocaleString("es-MX")}`)):t.status(404).json({error:"Agent not found"})}),F.delete("/:id",(r,t)=>{const{id:e}=r.params;c.prepare("DELETE FROM Agent WHERE id = ?").run(e).changes>0?(t.json({message:"Agent deleted successfully"}),console.log(`Agent DELETED by USER at ${new Date().toLocaleString("es-MX")}`)):t.status(404).json({error:"Agent not found"})});const rt=V.diskStorage({destination:g((r,t,e)=>{const s="storage/images";C.existsSync(s)||C.mkdirSync(s,{recursive:!0}),e(null,s)},"destination"),filename:g((r,t,e)=>{const s=`agent-${Date.now()}-${Math.round(Math.random()*1e9)}${q.extname(t.originalname)}`;e(null,s)},"filename")}),nt=V({storage:rt,limits:{fileSize:5*1024*1024},fileFilter:g((r,t,e)=>{const s=/jpeg|jpg|png|webp/,n=s.test(q.extname(t.originalname).toLowerCase()),o=s.test(t.mimetype);n&&o?e(null,!0):e(new Error("Invalid file type. Only JPEG, PNG and WEBP allowed."))},"fileFilter")});F.post("/upload-image",nt.single("image"),(r,t)=>{try{if(!r.file)return t.status(400).json({error:"No file uploaded"});const e=`http://localhost:3000/images/${r.file.filename}`;t.json({imageUrl:e}),console.log(`Image uploaded by USER at ${new Date().toLocaleString("es-MX")}`)}catch(e){console.error("Upload error:",e),t.status(500).json({error:"Failed to upload image"})}});class R{static{g(this,"MenuItem")}static tableName="MenuItem";constructor({id:t,name:e,quantity:s,unit:n,isActive:o,categoryId:a,printLocations:i,variablePrice:d,price:u}){this.id=t||null,this.name=e,this.quantity=s,this.unit=n,this.isActive=!!o,this.categoryId=a,this.printLocations=Array.isArray(i)?i:JSON.parse(i||"[]"),this.variablePrice=d||!1,this.price=u}static getAll(){return c.prepare(`SELECT * FROM ${this.tableName}`).all().map(s=>new R(s))}static getById(t){const s=c.prepare(`SELECT * FROM ${this.tableName} WHERE id = ?`).get(t);return s?new R(s):null}save(){return this.id?this.#e():(this.id=this.#t(),this.id)}#t(){const e=c.prepare(`INSERT INTO ${R.tableName} (name, quantity, unit, isActive, categoryId, printLocations, variablePrice, price)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)`).run(this.name,this.quantity,this.unit,this.isActive?1:0,this.categoryId,JSON.stringify(this.printLocations),this.variablePrice?1:0,this.price);return this.id=e.lastInsertRowid,this.id}#e(){return c.prepare(`UPDATE ${R.tableName}
            SET name = ?, quantity = ?, unit = ?, isActive = ?, categoryId = ?, printLocations = ?, variablePrice = ?, price = ?
            WHERE id = ?`).run(this.name,this.quantity,this.unit,this.isActive?1:0,this.categoryId,JSON.stringify(this.printLocations),this.variablePrice?1:0,this.price,this.id).changes}delete(){if(!this.id)throw new Error("Cannot delete an unsaved MenuItem.");return c.prepare(`DELETE FROM ${R.tableName} WHERE id = ?`).run(this.id).changes>0}}class y{static{g(this,"Ingredient")}static tableName="Ingredients";constructor({id:t,menuItemId:e,inventoryProductId:s,quantityUsed:n}){this.id=t||null,this.menuItemId=e,this.inventoryProductId=s,this.quantityUsed=n}static getAll(){return c.prepare(`SELECT * FROM ${this.tableName}`).all().map(s=>new y(s))}static getByMenuItemId(t){return c.prepare(`SELECT * FROM ${this.tableName} WHERE menuItemId = ?`).all(t).map(n=>new y(n))}static deleteByMenuItemId(t){return c.prepare(`DELETE FROM ${this.tableName} WHERE menuItemId = ?`).run(t).changes>0}save(){return this.id?this.#e():(this.id=this.#t(),this.id)}#t(){const e=c.prepare(`INSERT INTO ${y.tableName} (menuItemId, inventoryProductId, quantityUsed)
            VALUES (?, ?, ?)`).run(this.menuItemId,this.inventoryProductId,this.quantityUsed);return this.id=e.lastInsertRowid,this.id}#e(){return c.prepare(`UPDATE ${y.tableName}
            SET menuItemId = ?, inventoryProductId = ?, quantityUsed = ?
            WHERE id = ?`).run(this.menuItemId,this.inventoryProductId,this.quantityUsed,this.id).changes>0}delete(){if(!this.id)throw new Error("Cannot delete an unsaved Ingredient.");return c.prepare(`DELETE FROM ${y.tableName} WHERE id = ?`).run(this.id).changes>0}}class I{static{g(this,"StockItem")}static tableName="StockItem";constructor({id:t,name:e,stock:s,unit:n,isActive:o,categoryId:a,supplierId:i,cost:d}){this.id=t||null,this.name=e,this.stock=s,this.unit=n,this.isActive=!!o,this.categoryId=a,this.supplierId=i,this.cost=d}static getAll(){return c.prepare(`SELECT * FROM ${this.tableName}`).all().map(s=>new I(s))}static getById(t){const s=c.prepare(`SELECT * FROM ${this.tableName} WHERE id = ?`).get(t);return s?new I(s):null}save(){return this.id?this.#e():(this.id=this.#t(),this.id)}#t(){const e=c.prepare(`INSERT INTO ${I.tableName} (name, stock, unit, isActive, categoryId, supplierId, cost)
            VALUES (?, ?, ?, ?, ?, ?, ?)`).run(this.name,this.stock,this.unit,this.isActive?1:0,this.categoryId,this.supplierId,this.cost);return this.id=e.lastInsertRowid,this.id}#e(){return c.prepare(`UPDATE ${I.tableName}
            SET name = ?, stock = ?, unit = ?, isActive = ?, categoryId = ?, supplierId = ?, cost = ?
            WHERE id = ?`).run(this.name,this.stock,this.unit,this.isActive?1:0,this.categoryId,this.supplierId,this.cost,this.id).changes>0}delete(){if(!this.id)throw new Error("Cannot delete an unsaved StockItem.");return c.prepare(`DELETE FROM ${I.tableName} WHERE id = ?`).run(this.id).changes>0}}const j=D();j.get("/menu-items",(r,t)=>{try{const e=R.getAll();t.json(e)}catch(e){t.status(500).json({error:"Failed to fetch menu items. "+e.message})}}),j.get("/menu-items/:id",(r,t)=>{try{const{id:e}=r.params,s=R.getById(Number(e));s?t.json(s):t.status(404).json({error:"MenuItem not found."})}catch(e){t.status(500).json({error:"Failed to fetch menu item. "+e.message})}}),j.get("/menu-items-with-ingredients",(r,t)=>{try{const s=R.getAll().map(n=>{const a=y.getByMenuItemId(n.id).map(i=>{const d=I.getById(i.inventoryProductId);return{...i,stockItem:d}});return{...n,ingredients:a}});t.json(s)}catch(e){t.status(500).json({error:"Failed to fetch menu items with ingredients. "+e.message})}}),j.get("/menu-items/:id/ingredients",(r,t)=>{try{const{id:e}=r.params,s=R.getById(Number(e));if(s){const o=y.getByMenuItemId(s.id).map(a=>{const i=I.getById(a.inventoryProductId);return{...a,stockItem:i}});t.json({...s,ingredients:o})}else t.status(404).json({error:"MenuItem not found."})}catch(e){t.status(500).json({error:"Failed to fetch menu item. "+e.message})}}),j.post("/menu-items",(r,t)=>{try{const e=new R(r.body),s=e.save();r.body.ingredients.forEach(i=>{new y({menuItemId:s,inventoryProductId:i.inventoryProductId,quantityUsed:i.quantityUsed}).save()});const a=y.getByMenuItemId(e.id).map(i=>{const d=I.getById(i.inventoryProductId);return{...i,stockItem:d}});t.status(201).json({...e,ingredients:a})}catch(e){t.status(500).json({error:"Failed to create menu item. "+e.message})}}),j.put("/menu-items/:id",(r,t)=>{const e=r.params.id,{name:s,quantity:n,unit:o,isActive:a,categoryId:i,printLocations:d,variablePrice:u,price:l,ingredients:h}=r.body;let m=R.getById(e);if(!m)return t.status(404).json({error:"Menu item not found"});m.name=s,m.quantity=n,m.unit=o,m.isActive=a,m.categoryId=i,m.printLocations=d,m.variablePrice=u,m.price=l,m.save(),y.deleteByMenuItemId(e),h.forEach($=>{new y({menuItemId:e,inventoryProductId:$.inventoryProductId,quantityUsed:$.quantityUsed}).save()});const O=y.getByMenuItemId(e).map($=>{const U=I.getById($.inventoryProductId);return{...$,stockItem:U}});t.json({...m,ingredients:O})}),j.delete("/menu-items/:id",(r,t)=>{try{const{id:e}=r.params,s=R.getById(Number(e));s?(s.delete(),t.json({message:"MenuItem deleted successfully."})):t.status(404).json({error:"MenuItem not found."})}catch(e){t.status(500).json({error:"Failed to delete menu item. "+e.message})}}),j.get("/ingredients",(r,t)=>{try{const e=y.getAll();t.json(e)}catch(e){t.status(500).json({error:"Failed to fetch ingredients. "+e.message})}}),j.get("/ingredients/menu-item/:menuItemId",(r,t)=>{try{const{menuItemId:e}=r.params,s=y.getByMenuItemId(Number(e));t.json(s)}catch(e){t.status(500).json({error:"Failed to fetch ingredients. "+e.message})}}),j.post("/ingredients",(r,t)=>{try{const e=new y(r.body);if(!R.getById(e.menuItemId))return t.status(404).json({error:"MenuItem not found."});if(!I.getById(e.inventoryProductId))return t.status(404).json({error:"Inventory product not found."});const o=e.save();t.status(201).json({id:o})}catch(e){t.status(500).json({error:"Failed to create ingredient. "+e.message})}}),j.put("/ingredients/:id",(r,t)=>{try{const{id:e}=r.params,s=y.getById(Number(e));s?(Object.assign(s,r.body),s.save(),t.json({message:"Ingredient updated successfully."})):t.status(404).json({error:"Ingredient not found."})}catch(e){t.status(500).json({error:"Failed to update ingredient. "+e.message})}}),j.delete("/ingredients/:id",(r,t)=>{try{const{id:e}=r.params,s=y.getById(Number(e));s?(s.delete(),t.json({message:"Ingredient deleted successfully."})):t.status(404).json({error:"Ingredient not found."})}catch(e){t.status(500).json({error:"Failed to delete ingredient. "+e.message})}}),j.get("/stock-items",(r,t)=>{try{const e=I.getAll();t.json(e)}catch(e){t.status(500).json({error:"Failed to fetch stock items. "+e.message})}}),j.get("/stock-items/:id",(r,t)=>{try{const{id:e}=r.params,s=I.getById(Number(e));s?t.json(s):t.status(404).json({error:"StockItem not found."})}catch(e){t.status(500).json({error:"Failed to fetch stock item. "+e.message})}}),j.post("/stock-items",(r,t)=>{try{const s=new I(r.body).save();t.status(201).json({id:s})}catch(e){t.status(500).json({error:"Failed to create stock item. "+e.message})}}),j.put("/stock-items/:id",(r,t)=>{try{const{id:e}=r.params,s=I.getById(Number(e));s?(Object.assign(s,r.body),s.save(),t.json({message:"StockItem updated successfully."})):t.status(404).json({error:"StockItem not found."})}catch(e){t.status(500).json({error:"Failed to update stock item. "+e.message})}}),j.delete("/stock-items/:id",(r,t)=>{try{const{id:e}=r.params,s=I.getById(Number(e));s?(s.delete(),t.json({message:"StockItem deleted successfully."})):t.status(404).json({error:"StockItem not found."})}catch(e){t.status(500).json({error:"Failed to delete stock item. "+e.message})}});class E{static{g(this,"RecurrentDate")}static tableName="RecurrentDate";constructor({id:t,promoId:e,dayOfWeek:s,startTime:n,endTime:o}){this.id=t||null,this.promoId=e,this.dayOfWeek=s,this.startTime=n,this.endTime=o}static getAll(){return c.prepare(`SELECT * FROM ${this.tableName}`).all().map(s=>new E(s))}static getById(t){const s=c.prepare(`SELECT * FROM ${this.tableName} WHERE id = ?`).get(t);return s?new E(s):null}static getByPromoId(t){return c.prepare(`SELECT * FROM ${this.tableName} WHERE promoId = ?`).all(t).map(n=>new E(n))}isNowWithinRule(){const t=new Date,e=t.getDay(),n=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][e];if(this.dayOfWeek!==n)return!1;const[o,a]=this.startTime.split(":").map(Number),[i,d]=this.endTime.split(":").map(Number),u=new Date(t);u.setHours(o,a,0,0);const l=new Date(t);return l.setHours(i,d,0,0),l<=u&&l.setDate(l.getDate()+1),t>=u&&t<=l}isTimeWithinRule(t){const e=t.getDay(),n=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"][e];if(this.dayOfWeek!==n)return!1;const[o,a]=this.startTime.split(":").map(Number),[i,d]=this.endTime.split(":").map(Number),u=new Date(t);u.setHours(o,a,0,0);const l=new Date(t);return l.setHours(i,d,0,0),l<=u&&l.setDate(l.getDate()+1),t>=u&&t<=l}save(){if(this.id)return c.prepare(`UPDATE ${E.tableName}
                SET promoId = ?, dayOfWeek = ?, startTime = ?, endTime = ?
                WHERE id = ?`).run(this.promoId,this.dayOfWeek,this.startTime,this.endTime,this.id).changes>0;{const e=c.prepare(`INSERT INTO ${E.tableName} (promoId, dayOfWeek, startTime, endTime)
                VALUES (?, ?, ?, ?)`).run(this.promoId,this.dayOfWeek,this.startTime,this.endTime);return this.id=e.lastInsertRowid,this.id}}delete(){if(!this.id)throw new Error("Cannot delete an unsaved RecurrentDate.");return c.prepare(`DELETE FROM ${E.tableName} WHERE id = ?`).run(this.id).changes>0}}class f{static{g(this,"Promo")}static tableName="Promo";constructor({id:t,menuItemId:e,startDate:s,endDate:n,type:o,discount:a,buy_quantity:i,pay_quantity:d,percentage:u,always:l,isActive:h,name:m}){this.id=t||null,this.menuItemId=e,this.startDate=s,this.endDate=n,this.type=o,this.discount=a||null,this.buy_quantity=i||null,this.pay_quantity=d||null,this.percentage=u||null,this.always=!!l||!1,this.isActive=!!h,this.name=m}static getAll(){return c.prepare(`SELECT * FROM ${this.tableName}`).all().map(s=>new f(s))}static getById(t){const s=c.prepare(`SELECT * FROM ${this.tableName} WHERE id = ?`).get(t);return s?new f(s):null}static getActiveByMenuItemId(t){return c.prepare(`SELECT * FROM ${this.tableName} WHERE menuItemId = ? AND isActive = 1`).all(t).map(a=>new f(a)).filter(a=>a.isCurrentlyActive())}static getByMenuItemId(t){const s=c.prepare(`SELECT * FROM ${this.tableName} WHERE menuItemId = ?`).get(t);return s?new f(s):null}isCurrentlyActive(){const t=new Date;return this.always?!0:this.startDate&&t<new Date(this.startDate)||this.endDate&&t>new Date(this.endDate)?!1:this.getRecurrenceRules().some(s=>s.isNowWithinRule())}isValidAtTimestamp(t){const e=new Date(t);return this.always?!0:this.startDate&&e<new Date(this.startDate)||this.endDate&&e>new Date(this.endDate)?!1:this.getRecurrenceRules().some(n=>n.isTimeWithinRule(e))}calculateDiscount(t,e,s){let n=0;if(this.type==="percentage_discount")n=e*(this.percentage/100);else if(this.type==="buy_x_get_y"){const o=this.buy_quantity-this.pay_quantity;n=Math.floor(t/this.buy_quantity)*o*s}else this.type==="price_discount"&&(n=this.discount*t);return n}getRecurrenceRules(){if(!this.id)throw new Error("Cannot fetch recurrence rules for an unsaved Promo.");return E.getByPromoId(this.id)}save(){return this.id?this.#e():(this.id=this.#t(),this.id)}#t(){const e=c.prepare(`INSERT INTO ${f.tableName} (menuItemId, startDate, endDate, type, discount, buy_quantity, pay_quantity, percentage, always, isActive, name)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`).run(this.menuItemId,this.startDate,this.endDate,this.type,this.discount,this.buy_quantity,this.pay_quantity,this.percentage,this.always?1:0,this.isActive?1:0,this.name);return this.id=e.lastInsertRowid,this.id}#e(){return c.prepare(`UPDATE ${f.tableName}
            SET menuItemId = ?, startDate = ?, endDate = ?, type = ?, discount = ?, buy_quantity = ?, pay_quantity = ?, percentage = ?, always = ?, isActive = ?, name = ?
            WHERE id = ?`).run(this.menuItemId,this.startDate,this.endDate,this.type,this.discount,this.buy_quantity,this.pay_quantity,this.percentage,this.always?1:0,this.isActive?1:0,this.name,this.id).changes>0}delete(){if(!this.id)throw new Error("Cannot delete an unsaved Promo.");return E.getByPromoId(this.id).forEach(n=>n.delete()),c.prepare(`DELETE FROM ${f.tableName} WHERE id = ?`).run(this.id).changes>0}}class w{static{g(this,"OrderItem")}static tableName="OrderItem";constructor({id:t,menuItemId:e,orderId:s,promoId:n,quantity:o,subtotal:a,discountApplied:i,total:d,promoName:u,comments:l,quantityHistory:h="[]",appliedPromos:m="[]"}){this.id=t||null,this.menuItemId=e,this.orderId=s,this.promoId=n||null,this.quantity=o,this.subtotal=a,this.discountApplied=i||0,this.total=d||a-this.discountApplied,this.promoName=u||null,this.comments=l||null,this.quantityHistory=JSON.parse(h),this.appliedPromos=JSON.parse(m)}static getAll(){return c.prepare(`SELECT * FROM ${this.tableName}`).all().map(s=>new w(s))}static getById(t){const s=c.prepare(`SELECT * FROM ${this.tableName} WHERE id = ?`).get(t);return s?new w(s):null}static getByOrderId(t){return c.prepare(`SELECT * FROM ${this.tableName} WHERE orderId = ?`).all(t).map(n=>new w(n))}async addQuantity(t,e=new Date().toISOString()){this.quantity+t>=0&&this.quantityHistory.push({quantity:t,timestamp:e}),this.quantity+=t,this.quantity<0&&(this.quantity=0);const s=await R.getById(this.menuItemId);this.subtotal=s.price*this.quantity;const n=await f.getActiveByMenuItemId(this.menuItemId);return console.log("active promos",n.length),this.calculatePromotions(e,n),this.updateTotals(),this.save()}calculatePromotions(t,e){const s=[...this.quantityHistory].sort((n,o)=>new Date(n.timestamp)-new Date(o.timestamp));e.forEach(n=>{let o=0;if(s.forEach(a=>{a.promoActive=!1,n.isValidAtTimestamp(a.timestamp)&&(o+=a.quantity)}),o>0){const a=n.calculateDiscount(o,o*this.getBasePrice(),this.getBasePrice());a>0?this.appliedPromos.push({promoId:n.id,promoName:n.name,quantity:o,discountApplied:a,timestamp:t,type:n.type}):this.appliedPromos=this.appliedPromos.filter(i=>i.promoId!==n.id)}})}getBasePrice(){return R.getById(this.menuItemId).price}updateTotals(){console.log("applied promos",this.appliedPromos),this.discountApplied=this.appliedPromos.at(-1)?.discountApplied||0,this.discountApplied=Math.min(this.discountApplied,this.subtotal),this.total=this.subtotal-this.discountApplied}save(){if(this.id)return this.#e();{const t=R.getById(this.menuItemId);return this.subtotal||(this.subtotal=t.price*this.quantity),this.#t()}}#t(){const e=c.prepare(`INSERT INTO ${w.tableName} (menuItemId, orderId, promoId, quantity, subtotal, discountApplied, total, promoName, comments)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`).run(this.menuItemId,this.orderId,this.promoId,this.quantity,this.subtotal,this.discountApplied,this.total,this.promoName,this.comments);return this.id=e.lastInsertRowid,this.id}#e(){return c.prepare(`UPDATE ${w.tableName}
            SET menuItemId = ?, orderId = ?, promoId = ?, quantity = ?, subtotal = ?, discountApplied = ?, total = ?, promoName = ?, comments = ?, quantityHistory = ?, appliedPromos = ?
            WHERE id = ?`).run(this.menuItemId,this.orderId,this.promoId,this.quantity,this.subtotal,this.discountApplied,this.total,this.promoName,this.comments,JSON.stringify(this.quantityHistory),JSON.stringify(this.appliedPromos),this.id).changes>0}delete(){if(!this.id)throw new Error("Cannot delete an unsaved OrderItem.");return c.prepare(`DELETE FROM ${w.tableName} WHERE id = ?`).run(this.id).changes>0}}class p{static{g(this,"Order")}static tableName='"Order"';constructor({id:t,customer:e,subtotal:s,discountTotal:n,total:o,tip:a,createdAt:i,paymentMethod:d,cancelledAt:u,cancelReason:l,status:h,claimedById:m,billedById:N,billedAt:O}){this.id=t||null,this.customer=e,this.subtotal=s||0,this.discountTotal=n||0,this.total=o||0,this.tip=a||0,this.createdAt=i||null,this.paymentMethod=d||null,this.cancelledAt=u||null,this.cancelReason=l||null,this.status=h||"active",this.claimedById=m||null,this.billedById=N||null,this.billedAt=O||null}static getAll(){return c.prepare(`SELECT * FROM ${this.tableName}`).all().map(s=>new p(s))}static getByStatus(t){return c.prepare(`SELECT * FROM ${this.tableName} WHERE status = ?`).all(t).map(n=>new p(n))}static getActiveByClaimedId(t){return c.prepare(`SELECT * FROM ${this.tableName} WHERE claimedById = ? AND status = 'active'`).all(t).map(n=>new p(n))}static getById(t){const s=c.prepare(`SELECT * FROM ${this.tableName} WHERE id = ?`).get(t);return s?new p(s):null}static getByCustomer(t){return c.prepare(`SELECT * FROM ${this.tableName} WHERE customer = ?`).all(t).map(n=>new p(n))}save(){return this.id?this.#e():(this.id=this.#t(),this.id)}#t(){const e=c.prepare(`INSERT INTO ${p.tableName} (customer, subtotal, discountTotal, total, tip, paymentMethod, status, claimedById, billedById, billedAt, createdAt)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)`).run(this.customer,this.subtotal,this.discountTotal,this.total,this.tip,this.paymentMethod,this.status,this.claimedById,this.billedById,this.billedAt,this.createdAt);return this.id=e.lastInsertRowid,this.id}#e(){return c.prepare(`UPDATE ${p.tableName}
            SET customer = ?, subtotal = ?, discountTotal = ?, total = ?, tip = ?, paymentMethod = ?, cancelledAt = ?, cancelReason = ?, status = ?, claimedById = ?, billedById = ?, billedAt = ?, createdAt = ?
            WHERE id = ?`).run(this.customer,this.subtotal,this.discountTotal,this.total,this.tip,this.paymentMethod,this.cancelledAt,this.cancelReason,this.status,this.claimedById,this.billedById,this.billedAt,this.createdAt,this.id).changes>0}getEnhancedOrder(){const t=w.getByOrderId(this.id);let e=0,s=0;t.forEach(o=>{e+=o.subtotal,s+=o.discountApplied});const n=e-s<0?0:e-s;return{...this,orderItems:t,subtotal:e,discountTotal:s,total:n}}delete(){if(!this.id)throw new Error("Cannot delete an unsaved Order.");return c.prepare(`DELETE FROM ${p.tableName} WHERE id = ?`).run(this.id).changes>0}}const v=D();v.get("/",(r,t)=>{try{const s=p.getAll().map(n=>{const o=w.getByOrderId(n.id);let a=0,i=0;o.forEach(u=>{a+=u.subtotal,i+=u.discountApplied});const d=a-i<0?0:a-i;return n.subtotal=a,n.discountTotal=i,n.total=d,{...n,orderItems:o,subtotal:a,discountTotal:i}});t.json(s)}catch(e){t.status(500).json({error:"Failed to fetch orders. "+e.message})}}),v.get("/active",(r,t)=>{try{const s=p.getByStatus("active").map(n=>{const o=w.getByOrderId(n.id);let a=0,i=0;o.forEach(u=>{a+=u.subtotal,i+=u.discountApplied});const d=a-i<0?0:a-i;return n.subtotal=a,n.discountTotal=i,n.total=d,{...n,orderItems:o,subtotal:a,discountTotal:i}});t.json(s)}catch(e){t.status(500).json({error:"Failed to fetch orders. "+e.message})}}),v.get("/active-orders-by-agent/:agentId",(r,t)=>{try{const{agentId:e}=r.params,n=p.getActiveByClaimedId(e).map(o=>o.getEnhancedOrder());t.json(n)}catch(e){t.status(500).json({error:"Failed to fetch orders. "+e.message})}}),v.get("/:id",(r,t)=>{const e=r.params.id,s=p.getById(e);if(!s)return t.status(404).json({message:"Order not found"});const n=w.getByOrderId(e);let o=0,a=0;n.forEach(d=>{o+=d.subtotal,a+=d.discountApplied});const i=o-a<0?0:o-a;s.subtotal=o,s.discountTotal=a,s.total=i,t.json({...s,orderItems:n})}),v.post("/",(r,t)=>{try{const e=new p(r.body);e.createdAt=new Date().toISOString(),e.save(),t.status(201).json(e)}catch(e){t.status(500).json({error:"Failed to create order. "+e.message})}}),v.put("/:id",(r,t)=>{try{const{id:e}=r.params,s=p.getById(Number(e));s?(Object.assign(s,r.body),s.save(),t.json({message:"Order updated successfully."})):t.status(404).json({error:"Order not found."})}catch(e){t.status(500).json({error:"Failed to update order. "+e.message})}}),v.delete("/:id",(r,t)=>{try{const{id:e}=r.params,s=p.getById(Number(e));s?(s.delete(),t.json({message:"Order deleted successfully."})):t.status(404).json({error:"Order not found."})}catch(e){t.status(500).json({error:"Failed to delete order. "+e.message})}}),v.get("/:orderId/order-items",(r,t)=>{try{const{orderId:e}=r.params,s=w.getByOrderId(Number(e));t.json(s)}catch(e){t.status(500).json({error:"Failed to fetch order items. "+e.message})}}),v.put("/:id/charge",async(r,t)=>{try{const{id:e}=r.params,{tip:s,paymentMethod:n,billedById:o}=r.body,a=p.getById(Number(e));if(!a)return t.status(404).json({message:"Order not found"});a.tip=s,a.paymentMethod=n,a.status="paid",a.billedById=o,a.billedAt=new Date().toISOString(),a.save(),t.json({message:"Order charged successfully."})}catch(e){t.status(500).json({error:"Failed to charge order. "+e.message})}}),v.put("/:id/cancel",async(r,t)=>{try{const{id:e}=r.params,{cancelReason:s}=r.body,n=p.getById(Number(e));if(!n)return t.status(404).json({message:"Order not found"});n.status="cancelled",n.cancelledAt=new Date().toISOString(),n.cancelReason=s,n.save(),w.getByOrderId(Number(e)).forEach(a=>{const i=y.getByMenuItemId(a.menuItemId);for(const d of i){const u=I.getById(d.inventoryProductId);u.stock+=d.quantityUsed*a.quantity,u.save()}a.delete()}),t.status(200).json({message:"Order cancelled successfully",order:n})}catch(e){console.log(e),t.status(500).json({message:"Server error",error:e})}}),v.put("/:id/unpay",async(r,t)=>{try{const{id:e}=r.params,s=p.getById(Number(e));if(!s)return t.status(404).json({message:"Order not found"});s.status="unpaid",s.billedById=null,s.billedAt=null,s.save(),t.json({message:"Order status updated successfully."})}catch(e){t.status(500).json({error:"Failed to update order status. "+e.message})}}),v.patch("/:id/tip",(r,t)=>{try{const{id:e}=r.params,{tip:s}=r.body;if(s===void 0)return t.status(400).json({error:"Tip amount is required"});const n=p.getById(Number(e));if(!n)return t.status(404).json({message:"Order not found"});n.tip+=s,n.save();const o=n.getEnhancedOrder();t.json({message:"Tip added successfully",order:o})}catch(e){t.status(500).json({error:"Failed to add tip. "+e.message})}});const b=D();b.get("/",(r,t)=>{try{const e=f.getAll();t.json(e)}catch(e){t.status(500).json({error:"Failed to fetch promotions. "+e.message})}}),b.post("/promos-with-availability",(r,t)=>{try{const{availability:e,...s}=r.body;if(!["price_discount","percentage_discount","buy_x_get_y"].includes(s.type))return t.status(400).json({error:"Invalid promo type. Must be 'discount' or 'buy_x_get_y'."});s.startDate=s.startDate?new Date(s.startDate).toISOString():null,s.endDate=s.endDate?new Date(s.endDate).toISOString():null,s.buy_quantity=s.buy_quantity??null,s.pay_quantity=s.pay_quantity??null,s.price_discount=s.discount??null,s.percentage_discount=s.percentage??null;const n=new f(s);n.save();const o=n.id;e&&Object.entries(e).forEach(([i,d])=>{d&&d.startTime&&d.endTime&&new E({promoId:o,dayOfWeek:i.charAt(0).toUpperCase()+i.slice(1),startTime:d.startTime,endTime:d.endTime}).save()}),t.status(201).json({id:o,message:"Promo and availability created successfully."})}catch(e){console.error(e),t.status(500).json({error:`Failed to create promo and availability. ${e.message}`})}}),b.put("/promos-with-availability/:id",async(r,t)=>{try{const e=r.params.id,{availability:s,...n}=r.body,o=f.getById(e);if(!o)return t.status(404).json({error:"Promo not found."});Object.assign(o,n),o.save(),s&&(o.getRecurrenceRules().forEach(i=>i.delete()),Object.entries(s).forEach(([i,d])=>{d&&d.startTime&&d.endTime&&new E({promoId:o.id,dayOfWeek:i.charAt(0).toUpperCase()+i.slice(1),startTime:d.startTime,endTime:d.endTime}).save()})),t.status(200).json({id:o.id,message:"Promo and availability updated successfully."})}catch(e){console.error(e),t.status(500).json({error:`Failed to update promo and availability. ${e.message}`})}}),b.delete("/promos-with-availability/:id",async(r,t)=>{try{const e=r.params.id,s=f.getById(e);if(!s)return t.status(404).json({error:"Promo not found."});if(!s.delete())return t.status(500).json({error:"Failed to delete the promo."});t.status(200).json({message:"Promo and its availability successfully deleted."})}catch(e){console.error("Error in DELETE promo:",e),t.status(500).json({error:`Failed to delete promo and its availability. ${e.message}`})}}),b.get("/promos-with-availability",(r,t)=>{try{const s=f.getAll().map(n=>{const o=E.getByPromoId(n.id),a={Monday:{startTime:null,endTime:null},Tuesday:{startTime:null,endTime:null},Wednesday:{startTime:null,endTime:null},Thursday:{startTime:null,endTime:null},Friday:{startTime:null,endTime:null},Saturday:{startTime:null,endTime:null},Sunday:{startTime:null,endTime:null}};return o.forEach(i=>{a[i.dayOfWeek]={startTime:i.startTime,endTime:i.endTime}}),{...n,availability:a}});t.json(s)}catch(e){console.error(e),t.status(500).json({error:"Failed to fetch promotions with availability."})}}),b.get("/:id",(r,t)=>{try{const{id:e}=r.params,s=f.getById(Number(e));s?t.json(s):t.status(404).json({error:"Promotion not found."})}catch(e){t.status(500).json({error:"Failed to fetch promotion. "+e.message})}}),b.post("/",(r,t)=>{try{const s=new f(r.body).save();t.status(201).json({id:s})}catch(e){t.status(500).json({error:"Failed to create promotion. "+e.message})}}),b.put("/:id",(r,t)=>{try{const{id:e}=r.params,s=f.getById(Number(e));s?(Object.assign(s,r.body),s.save(),t.json({message:"Promotion updated successfully."})):t.status(404).json({error:"Promotion not found."})}catch(e){t.status(500).json({error:"Failed to update promotion. "+e.message})}}),b.delete("/:id",(r,t)=>{try{const{id:e}=r.params,s=f.getById(Number(e));s?(s.delete(),t.json({message:"Promotion deleted successfully."})):t.status(404).json({error:"Promotion not found."})}catch(e){t.status(500).json({error:"Failed to delete promotion. "+e.message})}}),b.get("/:id/recurrence-rules",(r,t)=>{try{const{id:e}=r.params,s=f.getById(Number(e));if(s){const n=s.getRecurrenceRules();t.json(n)}else t.status(404).json({error:"Promotion not found."})}catch(e){t.status(500).json({error:"Failed to fetch recurrence rules. "+e.message})}}),b.post("/:id/recurrence-rules",(r,t)=>{try{const{id:e}=r.params;if(f.getById(Number(e))){const o=new E({...r.body,promoId:Number(e)}).save();t.status(201).json({recurrenceId:o})}else t.status(404).json({error:"Promotion not found."})}catch(e){t.status(500).json({error:"Failed to create recurrence rule. "+e.message})}}),b.put("/recurrence-rules/:id",(r,t)=>{try{const{id:e}=r.params,s=E.getById(Number(e));s?(Object.assign(s,r.body),s.save(),t.json({message:"Recurrence rule updated successfully."})):t.status(404).json({error:"Recurrence rule not found."})}catch(e){t.status(500).json({error:"Failed to update recurrence rule. "+e.message})}}),b.delete("/promos/recurrence-rules/:id",(r,t)=>{try{const{id:e}=r.params,s=E.getById(Number(e));s?(s.delete(),t.json({message:"Recurrence rule deleted successfully."})):t.status(404).json({error:"Recurrence rule not found."})}catch(e){t.status(500).json({error:"Failed to delete recurrence rule. "+e.message})}}),b.get("/recurrent-dates",(r,t)=>{try{const e=E.getAll();t.json(e)}catch(e){t.status(500).json({error:"Failed to fetch recurrent dates. "+e.message})}}),b.get("/recurrent-dates/promo/:promoId",(r,t)=>{try{const{promoId:e}=r.params,s=E.getByPromoId(Number(e));t.json(s)}catch(e){t.status(500).json({error:"Failed to fetch recurrent dates for promo. "+e.message})}}),b.post("/recurrent-dates",(r,t)=>{try{const s=new E(r.body).save();t.status(201).json({id:s})}catch(e){t.status(500).json({error:"Failed to create recurrent date. "+e.message})}}),b.put("/recurrent-dates/:id",(r,t)=>{try{const{id:e}=r.params,s=E.getById(Number(e));s?(Object.assign(s,r.body),s.save(),t.json({message:"RecurrentDate updated successfully."})):t.status(404).json({error:"RecurrentDate not found."})}catch(e){t.status(500).json({error:"Failed to update recurrent date. "+e.message})}}),b.delete("/recurrent-dates/:id",(r,t)=>{try{const{id:e}=r.params,s=E.getById(Number(e));s?(s.delete(),t.json({message:"RecurrentDate deleted successfully."})):t.status(404).json({error:"RecurrentDate not found."})}catch(e){t.status(500).json({error:"Failed to delete recurrent date. "+e.message})}});class A{static{g(this,"Category")}static tableName="Category";constructor({id:t,name:e,description:s,type:n}){this.id=t||null,this.name=e,this.description=s,this.type=n}static getAll(){return c.prepare(`SELECT * FROM ${this.tableName} ORDER BY name ASC`).all().map(s=>new A(s))}static getById(t){const s=c.prepare(`SELECT * FROM ${this.tableName} WHERE id = ?`).get(t);return s?new A(s):null}static getAllByType(t){return c.prepare(`SELECT * FROM ${this.tableName} WHERE type = ? ORDER BY name ASC`).all(t).map(n=>new A(n))}save(){return this.id?this.#e():(this.id=this.#t(),this.id)}#t(){const e=c.prepare(`INSERT INTO ${A.tableName} (name, description, type)
            VALUES (?, ?, ?)`).run(this.name,this.description,this.type);return this.id=e.lastInsertRowid,this.id}#e(){return c.prepare(`UPDATE ${A.tableName}
            SET name = ?, description = ?, type = ?
            WHERE id = ?`).run(this.name,this.description,this.type,this.id).changes}delete(){if(!this.id)throw new Error("Cannot delete an unsaved Category.");return c.prepare(`DELETE FROM ${A.tableName} WHERE id = ?`).run(this.id).changes>0}}const M=D();M.get("/",(r,t)=>{try{const{type:e}=r.query;let s;e?s=A.getAllByType(e):s=A.getAll(),t.json(s)}catch(e){t.status(500).json({error:"Failed to fetch categories. "+e.message})}}),M.get("/:id",(r,t)=>{try{const{id:e}=r.params,s=A.getById(Number(e));s?t.json(s):t.status(404).json({error:"Category not found."})}catch(e){t.status(500).json({error:"Failed to fetch category. "+e.message})}}),M.post("/",(r,t)=>{try{const s=new A(r.body).save();t.status(201).json({id:s})}catch(e){t.status(500).json({error:"Failed to create category. "+e.message})}}),M.put("/:id",(r,t)=>{try{const{id:e}=r.params,s=A.getById(Number(e));s?(Object.assign(s,r.body),s.save(),t.json({message:"Category updated successfully."})):t.status(404).json({error:"Category not found."})}catch(e){t.status(500).json({error:"Failed to update category. "+e.message})}}),M.delete("/:id",(r,t)=>{try{const{id:e}=r.params,s=A.getById(Number(e));s?(s.delete(),t.json({message:"Category deleted successfully."})):t.status(404).json({error:"Category not found."})}catch(e){console.log(e),t.status(500).json({error:"Failed to delete category. "+e.message})}});class S{static{g(this,"Supplier")}static tableName="Supplier";constructor({id:t,name:e,phone:s,email:n,address:o}){this.id=t||null,this.name=e,this.phone=s||null,this.email=n||null,this.address=o||null}static getAll(){return c.prepare(`SELECT * FROM ${this.tableName} ORDER BY name ASC`).all().map(s=>new S(s))}static getById(t){const s=c.prepare(`SELECT * FROM ${this.tableName} WHERE id = ?`).get(t);return s?new S(s):null}save(){return this.id?this.#e():(this.id=this.#t(),this.id)}#t(){const e=c.prepare(`INSERT INTO ${S.tableName} (name, phone, email, address)
            VALUES (?, ?, ?, ?)`).run(this.name,this.phone,this.email,this.address);return this.id=e.lastInsertRowid,this.id}#e(){return c.prepare(`UPDATE ${S.tableName}
            SET name = ?, phone = ?, email = ?, address = ?
            WHERE id = ?`).run(this.name,this.phone,this.email,this.address,this.id).changes}delete(){if(!this.id)throw new Error("Cannot delete an unsaved Supplier.");return c.prepare(`DELETE FROM ${S.tableName} WHERE id = ?`).run(this.id).changes>0}}const P=D();P.get("/",(r,t)=>{try{const e=S.getAll();t.json(e)}catch(e){t.status(500).json({error:"Failed to fetch suppliers. "+e.message})}}),P.get("/:id",(r,t)=>{try{const{id:e}=r.params,s=S.getById(Number(e));s?t.json(s):t.status(404).json({error:"Supplier not found."})}catch(e){t.status(500).json({error:"Failed to fetch supplier. "+e.message})}}),P.post("/",(r,t)=>{try{const s=new S(r.body).save();t.status(201).json({id:s})}catch(e){t.status(500).json({error:"Failed to create supplier. "+e.message})}}),P.put("/:id",(r,t)=>{try{const{id:e}=r.params,s=S.getById(Number(e));s?(Object.assign(s,r.body),s.save(),t.json({message:"Supplier updated successfully."})):t.status(404).json({error:"Supplier not found."})}catch(e){t.status(500).json({error:"Failed to update supplier. "+e.message})}}),P.delete("/:id",(r,t)=>{try{const{id:e}=r.params,s=S.getById(Number(e));s?(s.delete(),t.json({message:"Supplier deleted successfully."})):t.status(404).json({error:"Supplier not found."})}catch(e){t.status(500).json({error:"Failed to delete supplier. "+e.message})}});class B{static{g(this,"Agent")}static tableName="Agent";constructor({id:t,name:e,lastName:s,image:n,address:o,phone:a,rfc:i,email:d,pin:u,role:l,isActive:h}){this.id=t||null,this.name=e,this.lastName=s,this.image=n||null,this.address=o,this.phone=a,this.rfc=i,this.email=d,this.pin=u,this.role=l,this.isActive=h!==void 0?h:1}static getAll(){return c.prepare(`SELECT id, name, lastName, email, role, isActive FROM ${this.tableName} ORDER BY name ASC`).all().map(s=>new B(s))}static getById(t){const s=c.prepare(`SELECT * FROM ${this.tableName} WHERE id = ?`).get(t);return s?new B(s):null}static getByEmail(t){const s=c.prepare(`SELECT * FROM ${this.tableName} WHERE email = ?`).get(t);return s?new B(s):null}async save(){return this.id?this.#e():(this.id=this.#t(),this.id)}#t(){const e=c.prepare(`INSERT INTO ${B.tableName} (name, lastName, image, address, phone, rfc, email, pin, role, isActive)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`).run(this.name,this.lastName,this.image,this.address,this.phone,this.rfc,this.email,this.pin,this.role,this.isActive);return this.id=e.lastInsertRowid,this.id}#e(){return c.prepare(`UPDATE ${B.tableName}
            SET name = ?, lastName = ?, image = ?, address = ?, phone = ?, rfc = ?, email = ?, pin = ?, role = ?, isActive = ?
            WHERE id = ?`).run(this.name,this.lastName,this.image,this.address,this.phone,this.rfc,this.email,this.pin,this.role,this.isActive,this.id).changes}delete(){if(!this.id)throw new Error("Cannot delete an unsaved Agent.");return c.prepare(`DELETE FROM ${B.tableName} WHERE id = ?`).run(this.id).changes>0}static async authenticate(t,e){const s=this.getByEmail(t);return!s||s.pin!==e?null:s}}_.config();const X=process.env.JWT_SECRET_KEY,ot=g((r,t="24h")=>{try{return x.sign(r,X,{expiresIn:t})}catch(e){throw new Error(`Error generating token: ${e.message}`)}},"generateToken"),at=g(r=>{try{return x.verify(r,X)}catch{throw new Error("Invalid or expired token.")}},"verifyToken"),it=g((r,t,e,s,n)=>({role:r,email:t,name:e,lastName:s,id:n}),"generateJwtPayload"),Y=g((r,t,e)=>{try{const s=r.headers.authorization;if(!s||!s.startsWith("Bearer "))return t.status(401).json({message:"Unauthorized: No token provided"});const n=s.split(" ")[1],o=at(n);r.user=o,e()}catch{t.status(401).json({message:"Unauthorized: Invalid or expired token"})}},"authenticate"),H=D();H.post("/",async(r,t)=>{const{email:e,pin:s}=r.body;if(!e||!s)return t.status(400).json({status:"error",message:"Missing required fields: email, pin are required."});try{let n=await B.authenticate(e,s);if(!n||n.length===0)return t.status(404).json({message:"Credenciales inv\xE1lidas"});let o=it(n.role,n.email,n.name,n.lastName,n.id),a=ot(o,"24h");t.status(200).json({token:a})}catch(n){console.log(n),t.status(500).json({error:n.message})}}),H.get("/",Y,async(r,t)=>{try{t.status(200).json({message:"valid"})}catch(e){t.status(500).json({error:e.message})}});const W=D();W.get("/",(r,t)=>{try{const e=w.getAll();t.json(e)}catch(e){t.status(500).json({error:"Failed to fetch order items. "+e.message})}}),W.post("/",async(r,t)=>{try{const{menuItemId:e,orderId:s,quantity:n,comments:o}=r.body,a=new Date().toISOString();if(!R.getById(e))return t.status(400).json({error:"El MenuItem proporcionado no existe."});const d=new w({menuItemId:e,orderId:s,quantity:0,subtotal:0,comments:o,quantityHistory:"[]",appliedPromos:"[]"}),u=y.getByMenuItemId(d.menuItemId),l=[];for(const N of u){const O=I.getById(N.inventoryProductId);if(O.stock-N.quantityUsed*n<0){l.push({...O,required:N.quantityUsed*n});continue}O.stock-=N.quantityUsed*n,O.save()}if(l.length>0)return t.status(400).json({error:"No hay suficientes insumos para agregar esto",notEnoughStock:l});await d.save(),await d.addQuantity(n,a);const m=p.getById(s).getEnhancedOrder();t.status(201).json({orderItem:d,order:m})}catch(e){console.error("Error creating OrderItem:",e),t.status(500).json({error:e.message})}}),W.put("/:id/quantity",async(r,t)=>{const{id:e}=r.params,{quantity:s,timestamp:n,comments:o}=r.body;try{const a=await w.getById(e);if(!a)return t.status(404).json({error:"OrderItem not found"});if(a.quantity+s<0)return t.status(400).json({error:"No se puede reducir m\xE1s la cantidad de el item"});const i=y.getByMenuItemId(a.menuItemId),d=[];for(const h of i){const m=I.getById(h.inventoryProductId);if(m.stock-h.quantityUsed*s<0){d.push({...m,required:h.quantityUsed*s});continue}m.stock-=h.quantityUsed*s,m.save()}if(d.length>0)return t.status(400).json({error:"No hay suficientes insumos para agregar esto",notEnoughStock:d});o&&(a.comments=o),await a.save(),await a.addQuantity(s,n);const l=p.getById(a.orderId).getEnhancedOrder();t.json({orderItem:a,order:l})}catch(a){t.status(500).json({error:a.message})}}),W.delete("/:id",async(r,t)=>{const{id:e}=r.params;try{const s=await w.getById(e);if(!s)return t.status(404).json({error:"OrderItem not found"});const n=p.getById(s.orderId),o=y.getByMenuItemId(s.menuItemId);for(const i of o){const d=I.getById(i.inventoryProductId);d.stock+=i.quantityUsed*s.quantity,d.save()}await s.delete();const a=n.getEnhancedOrder();t.json(a)}catch(s){console.error("Error deleting OrderItem:",s),t.status(500).json({error:s.message})}});const z=D();z.get("/",(r,t)=>{try{const e={restaurantName:process.env.RESTAURANT_NAME,securityPin:process.env.SECURITY_PIN};t.json(e)}catch{t.status(500).json({error:"Error al leer la configuraci\xF3n"})}});const ct=g(()=>{if(g(t=>c.prepare(`SELECT COUNT(*) as count FROM ${t}`).get().count===0,"isTableEmpty")("Agent")){console.log("Seed data: Adding initial agent...");const t=[{name:"Admin",lastName:"Admin",image:"",address:"",phone:"1234567890",rfc:"CHH123456789",email:"admin@admin.com",pin:"1234",role:"manager",isActive:!0}],e=c.prepare(`
      INSERT INTO Agent (name, lastName, image, address, phone, rfc, email, pin, role, isActive)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `);t.forEach(s=>{e.run(s.name,s.lastName,s.image,s.address,s.phone,s.rfc,s.email,s.pin,s.role,s.isActive?1:0)}),console.log("Admin seeded.")}},"seed"),T=k();T.use(k.json()),T.use(Q()),T.use("/authenticate",H),T.use(Y),T.use("/items",L),T.use("/agents",F),T.use("/menu",j),T.use("/orders",v),T.use("/order-items",W),T.use("/promos",b),T.use("/categories",M),T.use("/suppliers",P),T.use("/config",z),T.use("/images",k.static("storage/images")),ct();const G=3e3;T.listen(G,()=>{console.log(process.env.RESTAURANT_NAME),console.log(`Server is running on http://localhost:${G}`)});
